[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\guptas76\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\guptas76\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.4.7 (Oracle Corporation Java 1.8.0_431)
[debug] Load.defaultLoad until apply took 1647.919ms
[debug]           Load.loadUnit: plugins took 158.5574ms
[debug]           Load.loadUnit: defsScala took 0.8376ms
[debug] [Loading] Scanning directory C:\IJ\kafka-scala-project\project
[debug]             Load.loadUnit: mkEval took 12.3691ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\IJ\kafka-scala-project\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 46.8571 ms
[info] loading settings for project kafka-scala-project-build from idea.sbt ...
[debug]               Load.resolveProject(kafka-scala-project-build) took 182.2248ms
[debug]             Load.loadTransitive: finalizeProject(Project(id kafka-scala-project-build, base: C:\IJ\kafka-scala-project\project, plugins: List(<none>))) took 273.1557ms
[debug] [Loading] Done in C:\IJ\kafka-scala-project\project, returning: (kafka-scala-project-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 726.5418ms
[debug]           Load.loadUnit: cleanEvalClasses took 14.2282ms
[debug]         Load.loadUnit(file:/C:/IJ/kafka-scala-project/project/, ...) took 921.2684ms
[debug]       Load.apply: load took 1977.3349ms
[debug]       Load.apply: resolveProjects took 10.3696ms
[debug]       Load.apply: finalTransforms took 145.0569ms
[debug]       Load.apply: config.delegates took 17.3583ms
[debug]       Load.apply: Def.make(settings)... took 1471.4569ms
[debug]       Load.apply: structureIndex took 212.6413ms
[debug]       Load.apply: mkStreams took 2.7133ms
[info] loading project definition from C:\IJ\kafka-scala-project\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 7935.6587ms
[debug]     Load.loadUnit: defsScala took 0.0062ms
[debug] [Loading] Scanning directory C:\IJ\kafka-scala-project
[debug]       Load.loadUnit: mkEval took 0.5619ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\IJ\kafka-scala-project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin))), Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.5711 ms
[info] loading settings for project kafka-scala-project from build.sbt ...
[debug]         Load.resolveProject(kafka-scala-project) took 26.5272ms
[debug]       Load.loadTransitive: finalizeProject(Project(id kafka-scala-project, base: C:\IJ\kafka-scala-project, plugins: List(<none>))) took 30.3642ms
[debug] [Loading] Done in C:\IJ\kafka-scala-project, returning: (kafka-scala-project)
[debug]     Load.loadUnit: loadedProjectsRaw took 8854.0757ms
[debug]     Load.loadUnit: cleanEvalClasses took 19.2418ms
[debug]   Load.loadUnit(file:/C:/IJ/kafka-scala-project/, ...) took 16811.2798ms
[debug] Load.apply: load took 16848.7196ms
[debug] Load.apply: resolveProjects took 0.1885ms
[debug] Load.apply: finalTransforms took 33.645ms
[debug] Load.apply: config.delegates took 0.4904ms
[debug] Load.apply: Def.make(settings)... took 104.5462ms
[debug] Load.apply: structureIndex took 36.6136ms
[debug] Load.apply: mkStreams took 0.0038ms
[info] set current project to kafka-scala-project (in build file:/C:/IJ/kafka-scala-project/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 55222 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 55222, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to kafka-scala-project (in build file:/C:/IJ/kafka-scala-project/)
[debug] > Exec(idea-shell, None, None)
[warn] In the last 37738 seconds, 37734.604 (100.0%) were spent in GC. [Heap: 0.30GB free of 0.49GB, max 1.24GB] Consider increasing the JVM heap using `-Xmx` or try a different collector, e.g. `-XX:+UseG1GC`, for better performance.
[warn] In the last 4810 seconds, 4805.365 (99.9%) were spent in GC. [Heap: 0.25GB free of 0.49GB, max 1.24GB] Consider increasing the JVM heap using `-Xmx` or try a different collector, e.g. `-XX:+UseG1GC`, for better performance.
